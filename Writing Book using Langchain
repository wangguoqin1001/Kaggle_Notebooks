{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7408146,"sourceType":"datasetVersion","datasetId":4308593}],"dockerImageVersionId":30635,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install python-dotenv langchain openai pypdf python-docx","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-01-15T16:36:30.826694Z","iopub.execute_input":"2024-01-15T16:36:30.827137Z","iopub.status.idle":"2024-01-15T16:37:11.536765Z","shell.execute_reply.started":"2024-01-15T16:36:30.827096Z","shell.execute_reply":"2024-01-15T16:37:11.535746Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nos.environ['OPENAI_API_KEY'] = ''","metadata":{"execution":{"iopub.status.busy":"2024-01-15T16:37:11.539055Z","iopub.execute_input":"2024-01-15T16:37:11.539395Z","iopub.status.idle":"2024-01-15T16:37:11.545258Z","shell.execute_reply.started":"2024-01-15T16:37:11.539367Z","shell.execute_reply":"2024-01-15T16:37:11.544217Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Utils**","metadata":{}},{"cell_type":"code","source":"%%writefile utils.py\nfrom langchain.chains import LLMChain\nfrom langchain.chat_models import ChatOpenAI\n\nclass BaseStructureChain:\n\n    PROMPT = ''\n\n    def __init__(self) -> None:\n\n        self.llm = ChatOpenAI()\n\n        self.chain = LLMChain.from_string(\n            llm=self.llm,\n            template=self.PROMPT,\n        )\n\n        self.chain.verbose = True\n\n\nclass BaseEventChain:\n    \n    PROMPT = ''\n\n    def __init__(self) -> None:\n\n        self.llm = ChatOpenAI(model_name='gpt-3.5-turbo-16k')\n\n        self.chain = LLMChain.from_string(\n            llm=self.llm,\n            template=self.PROMPT,\n        )\n\n        self.chain.verbose = True","metadata":{"execution":{"iopub.status.busy":"2024-01-15T16:37:11.54634Z","iopub.execute_input":"2024-01-15T16:37:11.546692Z","iopub.status.idle":"2024-01-15T16:37:11.569106Z","shell.execute_reply.started":"2024-01-15T16:37:11.546661Z","shell.execute_reply":"2024-01-15T16:37:11.567745Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Characters**","metadata":{}},{"cell_type":"code","source":"%%writefile characters.py\nimport os\nfrom langchain.document_loaders import PyPDFLoader\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import LLMChain\n\nclass MainCharacterChain:\n\n    PROMPT = \"\"\"\n    You are provided with the resume of a person. \n    Describe the person's profile in a few sentences and include that person's name.\n\n    Resume: {text}\n\n    Profile:\"\"\"\n\n    def __init__(self) -> None:\n\n        self.llm = ChatOpenAI()\n        self.chain = LLMChain.from_string(\n            llm=self.llm,\n            template=self.PROMPT\n        )\n\n        self.chain.verbose = True\n\n    def load_resume(self, file_name):\n        folder = '/kaggle/input/resume'\n        file_path = os.path.join(folder, file_name)\n        loader = PyPDFLoader(file_path)\n        docs = loader.load_and_split()\n        return docs\n\n    def run(self, file_name):\n        # load the resume\n        # generate a summary\n        docs = self.load_resume(file_name)\n        resume = '\\n\\n'.join([doc.page_content for doc in docs])\n        return self.chain.run(resume)\n\n\nclass CharactersChain:\n\n    PROMPT = \"\"\"\n    You are writer and your job is to generate the profiles for the characters of a novel. \n    You are provided with a the subject and the genre of the book. \n    Create all the characters for that novel.\n    \n    Generate the characters' names followed by their profiles.\n    Describe the characters' profiles in a few sentences.\n\n    Follow this template:\n\n    [Character 1's name]: \n    [Character 1's profile]\n\n    [Character 2's name]: \n    [Character 2's profile]\n\n    ...\n\n    Subject: {subject}\n    Genre: {genre}\n\n    Characters:\"\"\"\n\n    def __init__(self) -> None:\n\n        self.llm = ChatOpenAI()\n        self.chain = LLMChain.from_string(\n            llm=self.llm,\n            template=self.PROMPT\n        )\n\n        self.chain.verbose = True\n\n    def run(self, subject, genre):\n        return self.chain.predict(\n            subject=subject,\n            genre=genre\n        )","metadata":{"execution":{"iopub.status.busy":"2024-01-15T16:37:11.57252Z","iopub.execute_input":"2024-01-15T16:37:11.572973Z","iopub.status.idle":"2024-01-15T16:37:11.585175Z","shell.execute_reply.started":"2024-01-15T16:37:11.572916Z","shell.execute_reply":"2024-01-15T16:37:11.584124Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Structure**","metadata":{}},{"cell_type":"code","source":"%%writefile structure.py\nfrom utils import BaseStructureChain, ChatOpenAI\n\nclass TitleChain(BaseStructureChain):\n\n    PROMPT = \"\"\"\n    Your job is to generate the title for a novel about the following subject and characters. \n    Return a title and only a title!\n    The title should be consistent with the genre of the novel.\n    The title should be consistent with the style of the author.\n\n    Subject: {subject}\n    Genre: {genre}\n    Author: {author}\n\n    Novel's characters: {profile}\n\n    Title:\"\"\"\n\n    def run(self, subject, genre, author, profile):\n        return self.chain.predict(\n            subject=subject,\n            genre=genre,\n            author=author,\n            profile=profile\n        )\n    \n\nclass PlotChain(BaseStructureChain):\n\n    PROMPT = \"\"\"\n    Your job is to generate the plot for a novel. Return a plot and only a plot!\n    Describe the full plot of the story.\n    You are provided the following subject, title and characters.\n    The plot should be consistent with the genre of the novel.\n    The plot should be consistent with the style of the author.\n\n    Consider the following attributes to write an exciting story:\n    {features}\n\n    subject: {subject}\n    Genre: {genre}\n    Author: {author}\n\n    Title: {title}\n    Novel's characters: {profile}\n\n    DON'T refer to the author in the plot!\n    Return a detailled plot and only the plot of the story\n    Plot:\"\"\"\n\n    HELPER_PROMPT = \"\"\"\n    Generate a list of attributes that characterized an exciting story.\n\n    List of attributes:\"\"\"\n    \n    def run(self, subject, genre, author, profile, title):\n        features = ChatOpenAI().predict(self.HELPER_PROMPT)\n\n        plot = self.chain.predict(\n            features=features,\n            subject=subject,\n            genre=genre,\n            author=author,\n            profile=profile,\n            title=title\n        )\n\n        return plot\n    \n\nclass ChaptersChain(BaseStructureChain):\n\n    PROMPT = \"\"\"\n    Your job is to generate a list of chapters. \n    ONLY the list and nothing more!\n    You are provided with a title, a plot and the characters for a novel.\n    Generate a list of chapters describing the plot of that novel.\n    Make sure the chapters are consistent with the plot.\n    The chapters should be consistent with the genre of the novel. \n    The chapters should be consistent with the style of the author. \n\n    Follow this template: \n\n    Prologue: [description of prologue]\n    Chapter 1: [description of chapter 1]\n    ...\n    Epilogue: [description of epilogue]\n\n    Make sure the chapter is followed by the character `:` and its description. For example: `Chapter 1: [description of chapter 1]`\n    \n    subject: {subject}\n    Genre: {genre}\n    Author: {author}\n\n    Title: {title}\n    Novel's characters: {profile}\n\n    Plot: {plot}\n    \n    Return the chapter list and only the chapter list\n    Chapters list:\"\"\"\n    \n    def run(self, subject, genre, author, profile, title, plot):\n        response = self.chain.predict(\n            subject=subject,\n            genre=genre,\n            author=author,\n            profile=profile,\n            title=title,\n            plot=plot\n        )\n\n        return self.parse(response)\n\n    def parse(self, response):\n        chapter_list = response.strip().split('\\n')\n        chapter_list = [chapter for chapter in chapter_list if ':' in chapter]\n        chapter_dict = dict([\n            chapter.strip().split(':') \n            for chapter in chapter_list\n        ])\n\n        return chapter_dict\n    \n\ndef get_structure(subject, genre, author, profile):\n\n    title_chain = TitleChain()\n    plot_chain = PlotChain()\n    chapters_chain = ChaptersChain()\n\n    title = title_chain.run(\n        subject, \n        genre, \n        author, \n        profile\n    )\n    plot = plot_chain.run(\n        subject, \n        genre, \n        author, \n        profile, \n        title\n    )\n    chapter_dict = chapters_chain.run(\n        subject, \n        genre, \n        author, \n        profile, \n        title, \n        plot\n    )\n\n    return title, plot, chapter_dict","metadata":{"execution":{"iopub.status.busy":"2024-01-15T16:37:11.586917Z","iopub.execute_input":"2024-01-15T16:37:11.587744Z","iopub.status.idle":"2024-01-15T16:37:11.606602Z","shell.execute_reply.started":"2024-01-15T16:37:11.587699Z","shell.execute_reply":"2024-01-15T16:37:11.605453Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**events**","metadata":{}},{"cell_type":"code","source":"%%writefile events.py\nfrom utils import BaseEventChain, ChatOpenAI\n\nclass ChapterPlotChain(BaseEventChain):\n\n    HELPER_PROMPT = \"\"\"\n    Generate a list of attributes that characterized an exciting story.\n\n    List of attributes:\"\"\"\n\n    PROMPT = \"\"\"\n    You are a writer and your job is to generate the plot for one and only one chapter of a novel. \n    You are provided with the title, the main plot of the novel and the characters.\n    Additionally, you are provided with the plots of the previous chapters and the outline of the novel.\n    Make sure to generate a plot that describe accurately the story of the chapter. \n    Each chapter should have its own arc, but should be consistent with the other chapters and the overall story.\n    The chapter's plot should be consistent with the genre of the novel.\n    The chapter's plot should be consistent with the style of the author. \n\n    Consider the following attributes to write an exciting story:\n    {features}\n\n    subject: {subject}\n    Genre: {genre}\n    Author: {author}\n\n    Title: {title}\n    Novel's characters: {profile}\n\n    Novel's Plot: {plot}\n\n    Outline:\n    {outline}\n\n    Chapter Plots:\n    {summaries}\n\n    Return a detailled plot. DON'T refer to the author nor the chapter's name in the plot!\n    Return the plot and only the plot of the story in the chapter\n    Plot of {chapter}:\"\"\"\n\n    def run(self, subject, genre, author, profile, title,\n            plot, summaries_dict, chapter_dict, chapter):\n        \n        features = ChatOpenAI().predict(self.HELPER_PROMPT)\n\n        outline = '\\n'.join([\n            '{} - {}'.format(chapter, description)\n            for chapter, description in chapter_dict.items()\n        ])\n\n        summaries = '\\n\\n'.join([\n            'Plot of {}: {}'.format(chapter, summary)\n            for chapter, summary in summaries_dict.items()\n        ])\n\n        return self.chain.predict(\n            subject=subject,\n            genre=genre,\n            author=author,\n            profile=profile,\n            title=title,\n            plot=plot,\n            features=features,\n            outline=outline,\n            summaries=summaries,\n            chapter=chapter\n        )\n    \n\nclass EventsChain(BaseEventChain):\n\n    PROMPT = \"\"\"\n    You are a writer and your job is to come up with a detailled list of events happens in the current chapter of a novel.\n    Be very specific about the actions of the different characters.\n    Those events describes the plot of that chapter and the actions of the different characters in chronological order. \n    You are provided with the title, the main plot of the novel, the characters, and the plot of that chapter.\n    Additionally, you are provided with the list of the events that were outlined in the previous chapters.\n    The event list should be consistent with the genre of the novel.\n    The event list should be consistent with the style of the author.\n\n    The each element of that list should be returned on different lines. Follow this template:\n\n    Event 1\n    Event 2\n    ...\n    Final event\n\n    subject: {subject}\n    Genre: {genre}\n    Author: {author}\n\n    Title: {title}\n    Novel's characters: {profile}\n\n    Novel's Plot: {plot}\n\n    Events you outlined for previous chapters: {previous_events}\n\n    Plot of the current chapter:\n    {summary}\n\n    Don't hesitate to create the necessary events to generate a meaningful story\n    Return the events and only the events that capture the story!\n    Event list for that chapter:\"\"\"\n    \n    def run(self, subject, genre, author, profile, \n            title, plot, summary, event_dict):\n        \n        previous_events = ''\n        for chapter, events in event_dict.items():\n            previous_events += '\\n' + chapter\n            for event in events:\n                previous_events += '\\n' + event\n\n        response = self.chain.predict(\n            subject=subject,\n            genre=genre,\n            author=author,\n            profile=profile,\n            title=title,\n            plot=plot,\n            summary=summary,\n            previous_events=previous_events,\n        )\n\n        return self.parse(response)\n    \n    def parse(self, response):\n\n        event_list = response.strip().split('\\n')\n        event_list = [\n            event.strip() for event in event_list if event.strip()\n        ]\n        return event_list\n    \n\ndef get_events(subject, genre, author, profile, title, plot, chapter_dict):\n    chapter_plot_chain = ChapterPlotChain()\n    events_chain = EventsChain()\n    summaries_dict = {}\n    event_dict = {}\n\n    for chapter, _ in chapter_dict.items():\n\n        summaries_dict[chapter] = chapter_plot_chain.run(\n            subject=subject, \n            genre=genre, \n            author=author, \n            profile=profile, \n            title=title, \n            plot=plot, \n            summaries_dict=summaries_dict, \n            chapter_dict=chapter_dict, \n            chapter=chapter\n        )\n\n        event_dict[chapter] = events_chain.run(\n            subject=subject, \n            genre=genre, \n            author=author, \n            profile=profile, \n            title=title, \n            plot=plot, \n            summary=summaries_dict[chapter], \n            event_dict=event_dict\n        )\n\n    return summaries_dict, event_dict","metadata":{"execution":{"iopub.status.busy":"2024-01-15T16:37:11.608331Z","iopub.execute_input":"2024-01-15T16:37:11.608678Z","iopub.status.idle":"2024-01-15T16:37:11.630769Z","shell.execute_reply.started":"2024-01-15T16:37:11.608648Z","shell.execute_reply":"2024-01-15T16:37:11.629081Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**writing**","metadata":{}},{"cell_type":"code","source":"%%writefile writing.py\nfrom utils import BaseEventChain\n\nclass WriterChain(BaseEventChain):\n\n    PROMPT = \"\"\"\n    You are a novel writer. The novel is described by a list of events. \n    You have already written the novel up to the last event. \n    Your job is to generate the paragraphs of the novel about the new event.\n    You are provided with a the title, the novel's plot, the characters and a plot of the current chapter.\n    Make sure the paragraphs are consistent with the plot of the chapter.\n    Additionally you are provided with the list of events you have already written about.\n    The paragraphs should be consistent with the genre of the novel.\n    The paragraphs should be consistent with the style of the author.\n\n    Genre: {genre}\n    Author: {author}\n\n    Title: {title}\n\n    Novel's characters: {profile}\n\n    Novel's Plot: {plot}\n\n    Previous events:\n    {previous_events}\n\n    Current Chapter summary: {summary}\n\n    Previous paragraphs:\n    {previous_paragraphs}\n\n    New event you need to write about now: \n    {current_event}\n\n    You are the author and write the paragraphs as if they were part of the novel.\n    DON'T refer to the author nor the chapters in the paragraphs!\n    Only write the story related to that event with the necessary dialogues between the characters!\n    Paragraphs of the novel describing that event:\"\"\"\n\n    def run(self, genre, author, title, profile, plot, \n            previous_events, summary, previous_paragraphs, current_event):\n\n        previous_events = '\\n'.join(previous_events)\n\n        return self.chain.predict(\n            genre=genre, \n            author=author, \n            title=title, \n            profile=profile, \n            plot=plot, \n            previous_events=previous_events, \n            summary=summary,\n            previous_paragraphs=previous_paragraphs, \n            current_event=current_event\n        )\n    \ndef write_book(genre, author, title, profile, plot, summaries_dict, event_dict):\n    \n    writer_chain = WriterChain()\n    previous_events = []\n    book = {}\n    paragraphs = ''\n\n    for chapter, event_list in event_dict.items():\n\n        book[chapter] = []\n\n        for event in event_list:\n\n            paragraphs = writer_chain.run(\n                genre=genre, \n                author=author, \n                title=title, \n                profile=profile, \n                plot=plot, \n                previous_events=previous_events, \n                summary=summaries_dict[chapter], \n                previous_paragraphs=paragraphs, \n                current_event=event\n            )\n\n            previous_events.append(event)\n            book[chapter].append(paragraphs)\n\n    return book","metadata":{"execution":{"iopub.status.busy":"2024-01-15T16:37:11.632655Z","iopub.execute_input":"2024-01-15T16:37:11.633377Z","iopub.status.idle":"2024-01-15T16:37:11.652054Z","shell.execute_reply.started":"2024-01-15T16:37:11.633344Z","shell.execute_reply":"2024-01-15T16:37:11.650861Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**publishing**","metadata":{}},{"cell_type":"code","source":"%%writefile publishing.py\nimport docx\n\n\nclass DocWriter:\n\n    def __init__(self) -> None:\n        self.doc = docx.Document()\n\n    def write_doc(self, book, chapter_dict, title):\n\n        self.doc.add_heading(title, 0)\n\n        for chapter, paragraphs_list in book.items():\n\n            description = chapter_dict[chapter]\n            chapter_name = '{}: {}'.format(\n                chapter.strip(), description.strip()\n            )\n\n            self.doc.add_heading(chapter_name, 1)\n\n            text = '\\n\\n'.join(paragraphs_list)\n            self.doc.add_paragraph(text)\n\n        self.doc.save('{}.docx'.format((title)))","metadata":{"execution":{"iopub.status.busy":"2024-01-15T16:37:11.653254Z","iopub.execute_input":"2024-01-15T16:37:11.653681Z","iopub.status.idle":"2024-01-15T16:37:11.67365Z","shell.execute_reply.started":"2024-01-15T16:37:11.653646Z","shell.execute_reply":"2024-01-15T16:37:11.672082Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Main**","metadata":{}},{"cell_type":"code","source":"import json\nfrom characters import MainCharacterChain, CharactersChain\nfrom structure import get_structure\nfrom events import get_events\nfrom writing import write_book\nfrom publishing import DocWriter\n\nsubject = \"\"\"\nEmbroiled in the excruciating war between human and machines, the main character is in a moral dilema to choose which side.\n\"\"\"\n\nauthor='Dan Brown'\ngenre='Thriller and Adventure'\n\nmain_character_chain = MainCharacterChain()\nprofiles = main_character_chain.run('Profile.pdf')\nprint('Main character profile: ', profiles)\n\n#characters_chain = CharactersChain()\n#profiles = characters_chain.run(subject, genre)\n\ndoc_writer = DocWriter()\n\ntitle, plot, chapter_dict = get_structure(\n    subject, \n    genre, \n    author, \n    profiles\n)\n\nprint(title)\nprint()\nprint(plot)\nprint()\nprint(chapter_dict)\n\nsummaries_dict, event_dict = get_events(\n    subject, \n    genre, \n    author, \n    profiles, \n    title, \n    plot, \n    chapter_dict\n)\n\nd = [\n    title, \n    plot, \n    chapter_dict,\n    summaries_dict, \n    event_dict\n]\n\nwith open(\"save_buffer_{}.json\".format(title), 'w') as outfile:\n    json.dump(d, outfile)\n\n\nbook = write_book(\n    genre, \n    author, \n    title, \n    profiles, \n    plot, \n    summaries_dict, \n    event_dict\n)\n\ndoc_writer.write_doc(\n    book, \n    chapter_dict, \n    title\n)","metadata":{"execution":{"iopub.status.busy":"2024-01-15T16:37:11.675698Z","iopub.execute_input":"2024-01-15T16:37:11.676149Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null}]}